// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: journal_service.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JournalService_Create_FullMethodName  = "/users_service.JournalService/Create"
	JournalService_GetById_FullMethodName = "/users_service.JournalService/GetById"
	JournalService_GetList_FullMethodName = "/users_service.JournalService/GetList"
	JournalService_Update_FullMethodName  = "/users_service.JournalService/Update"
	JournalService_Delete_FullMethodName  = "/users_service.JournalService/Delete"
)

// JournalServiceClient is the client API for JournalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalServiceClient interface {
	Create(ctx context.Context, in *CreateJournal, opts ...grpc.CallOption) (*Journal, error)
	GetById(ctx context.Context, in *JournalPrimaryKey, opts ...grpc.CallOption) (*Journal, error)
	GetList(ctx context.Context, in *GetListJournalRequest, opts ...grpc.CallOption) (*GetListJournalResponse, error)
	Update(ctx context.Context, in *UpdateJournal, opts ...grpc.CallOption) (*Journal, error)
	Delete(ctx context.Context, in *JournalPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type journalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalServiceClient(cc grpc.ClientConnInterface) JournalServiceClient {
	return &journalServiceClient{cc}
}

func (c *journalServiceClient) Create(ctx context.Context, in *CreateJournal, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, JournalService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetById(ctx context.Context, in *JournalPrimaryKey, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, JournalService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetList(ctx context.Context, in *GetListJournalRequest, opts ...grpc.CallOption) (*GetListJournalResponse, error) {
	out := new(GetListJournalResponse)
	err := c.cc.Invoke(ctx, JournalService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) Update(ctx context.Context, in *UpdateJournal, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, JournalService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) Delete(ctx context.Context, in *JournalPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JournalService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalServiceServer is the server API for JournalService service.
// All implementations must embed UnimplementedJournalServiceServer
// for forward compatibility
type JournalServiceServer interface {
	Create(context.Context, *CreateJournal) (*Journal, error)
	GetById(context.Context, *JournalPrimaryKey) (*Journal, error)
	GetList(context.Context, *GetListJournalRequest) (*GetListJournalResponse, error)
	Update(context.Context, *UpdateJournal) (*Journal, error)
	Delete(context.Context, *JournalPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedJournalServiceServer()
}

// UnimplementedJournalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJournalServiceServer struct {
}

func (UnimplementedJournalServiceServer) Create(context.Context, *CreateJournal) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedJournalServiceServer) GetById(context.Context, *JournalPrimaryKey) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedJournalServiceServer) GetList(context.Context, *GetListJournalRequest) (*GetListJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedJournalServiceServer) Update(context.Context, *UpdateJournal) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedJournalServiceServer) Delete(context.Context, *JournalPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedJournalServiceServer) mustEmbedUnimplementedJournalServiceServer() {}

// UnsafeJournalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalServiceServer will
// result in compilation errors.
type UnsafeJournalServiceServer interface {
	mustEmbedUnimplementedJournalServiceServer()
}

func RegisterJournalServiceServer(s grpc.ServiceRegistrar, srv JournalServiceServer) {
	s.RegisterService(&JournalService_ServiceDesc, srv)
}

func _JournalService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJournal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).Create(ctx, req.(*CreateJournal))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetById(ctx, req.(*JournalPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetList(ctx, req.(*GetListJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJournal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).Update(ctx, req.(*UpdateJournal))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).Delete(ctx, req.(*JournalPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalService_ServiceDesc is the grpc.ServiceDesc for JournalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.JournalService",
	HandlerType: (*JournalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JournalService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _JournalService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _JournalService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JournalService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JournalService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "journal_service.proto",
}
