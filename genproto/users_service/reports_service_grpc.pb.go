// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: reports_service.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportService_GetStudent_FullMethodName               = "/users_service.ReportService/GetStudent"
	ReportService_GetSupportTeacher_FullMethodName        = "/users_service.ReportService/GetSupportTeacher"
	ReportService_GetAdministrator_FullMethodName         = "/users_service.ReportService/GetAdministrator"
	ReportService_GetTeacher_FullMethodName               = "/users_service.ReportService/GetTeacher"
	ReportService_GetStudentGroup_FullMethodName          = "/users_service.ReportService/GetStudentGroup"
	ReportService_GetStudentGroupByTeacher_FullMethodName = "/users_service.ReportService/GetStudentGroupByTeacher"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	GetStudent(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*StudentList, error)
	GetSupportTeacher(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*SupportTeacherList, error)
	GetAdministrator(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*AdminList, error)
	GetTeacher(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*TeacherList, error)
	GetStudentGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*StudentList, error)
	GetStudentGroupByTeacher(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*StudentReportByTeacher, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) GetStudent(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*StudentList, error) {
	out := new(StudentList)
	err := c.cc.Invoke(ctx, ReportService_GetStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetSupportTeacher(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*SupportTeacherList, error) {
	out := new(SupportTeacherList)
	err := c.cc.Invoke(ctx, ReportService_GetSupportTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetAdministrator(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*AdminList, error) {
	out := new(AdminList)
	err := c.cc.Invoke(ctx, ReportService_GetAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetTeacher(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*TeacherList, error) {
	out := new(TeacherList)
	err := c.cc.Invoke(ctx, ReportService_GetTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetStudentGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*StudentList, error) {
	out := new(StudentList)
	err := c.cc.Invoke(ctx, ReportService_GetStudentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetStudentGroupByTeacher(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*StudentReportByTeacher, error) {
	out := new(StudentReportByTeacher)
	err := c.cc.Invoke(ctx, ReportService_GetStudentGroupByTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations must embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	GetStudent(context.Context, *ReportRequest) (*StudentList, error)
	GetSupportTeacher(context.Context, *ReportRequest) (*SupportTeacherList, error)
	GetAdministrator(context.Context, *ReportRequest) (*AdminList, error)
	GetTeacher(context.Context, *ReportRequest) (*TeacherList, error)
	GetStudentGroup(context.Context, *GroupId) (*StudentList, error)
	GetStudentGroupByTeacher(context.Context, *GroupId) (*StudentReportByTeacher, error)
	mustEmbedUnimplementedReportServiceServer()
}

// UnimplementedReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (UnimplementedReportServiceServer) GetStudent(context.Context, *ReportRequest) (*StudentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedReportServiceServer) GetSupportTeacher(context.Context, *ReportRequest) (*SupportTeacherList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportTeacher not implemented")
}
func (UnimplementedReportServiceServer) GetAdministrator(context.Context, *ReportRequest) (*AdminList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrator not implemented")
}
func (UnimplementedReportServiceServer) GetTeacher(context.Context, *ReportRequest) (*TeacherList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacher not implemented")
}
func (UnimplementedReportServiceServer) GetStudentGroup(context.Context, *GroupId) (*StudentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGroup not implemented")
}
func (UnimplementedReportServiceServer) GetStudentGroupByTeacher(context.Context, *GroupId) (*StudentReportByTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGroupByTeacher not implemented")
}
func (UnimplementedReportServiceServer) mustEmbedUnimplementedReportServiceServer() {}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s grpc.ServiceRegistrar, srv ReportServiceServer) {
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetStudent(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetSupportTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetSupportTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetSupportTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetSupportTeacher(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetAdministrator(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetTeacher(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetStudentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetStudentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetStudentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetStudentGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetStudentGroupByTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetStudentGroupByTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetStudentGroupByTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetStudentGroupByTeacher(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the grpc.ServiceDesc for ReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _ReportService_GetStudent_Handler,
		},
		{
			MethodName: "GetSupportTeacher",
			Handler:    _ReportService_GetSupportTeacher_Handler,
		},
		{
			MethodName: "GetAdministrator",
			Handler:    _ReportService_GetAdministrator_Handler,
		},
		{
			MethodName: "GetTeacher",
			Handler:    _ReportService_GetTeacher_Handler,
		},
		{
			MethodName: "GetStudentGroup",
			Handler:    _ReportService_GetStudentGroup_Handler,
		},
		{
			MethodName: "GetStudentGroupByTeacher",
			Handler:    _ReportService_GetStudentGroupByTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reports_service.proto",
}
