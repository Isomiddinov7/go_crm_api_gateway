// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: schedules_service.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulesService_Create_FullMethodName  = "/users_service.SchedulesService/Create"
	SchedulesService_GetById_FullMethodName = "/users_service.SchedulesService/GetById"
	SchedulesService_GetList_FullMethodName = "/users_service.SchedulesService/GetList"
	SchedulesService_Update_FullMethodName  = "/users_service.SchedulesService/Update"
	SchedulesService_Delete_FullMethodName  = "/users_service.SchedulesService/Delete"
)

// SchedulesServiceClient is the client API for SchedulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulesServiceClient interface {
	Create(ctx context.Context, in *CreateSchedules, opts ...grpc.CallOption) (*Schedules, error)
	GetById(ctx context.Context, in *SchedulesPrimaryKey, opts ...grpc.CallOption) (*Schedules, error)
	GetList(ctx context.Context, in *GetListSchedulesRequest, opts ...grpc.CallOption) (*GetListSchedulesResponse, error)
	Update(ctx context.Context, in *UpdateSchedules, opts ...grpc.CallOption) (*Schedules, error)
	Delete(ctx context.Context, in *SchedulesPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type schedulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulesServiceClient(cc grpc.ClientConnInterface) SchedulesServiceClient {
	return &schedulesServiceClient{cc}
}

func (c *schedulesServiceClient) Create(ctx context.Context, in *CreateSchedules, opts ...grpc.CallOption) (*Schedules, error) {
	out := new(Schedules)
	err := c.cc.Invoke(ctx, SchedulesService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesServiceClient) GetById(ctx context.Context, in *SchedulesPrimaryKey, opts ...grpc.CallOption) (*Schedules, error) {
	out := new(Schedules)
	err := c.cc.Invoke(ctx, SchedulesService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesServiceClient) GetList(ctx context.Context, in *GetListSchedulesRequest, opts ...grpc.CallOption) (*GetListSchedulesResponse, error) {
	out := new(GetListSchedulesResponse)
	err := c.cc.Invoke(ctx, SchedulesService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesServiceClient) Update(ctx context.Context, in *UpdateSchedules, opts ...grpc.CallOption) (*Schedules, error) {
	out := new(Schedules)
	err := c.cc.Invoke(ctx, SchedulesService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesServiceClient) Delete(ctx context.Context, in *SchedulesPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SchedulesService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulesServiceServer is the server API for SchedulesService service.
// All implementations must embed UnimplementedSchedulesServiceServer
// for forward compatibility
type SchedulesServiceServer interface {
	Create(context.Context, *CreateSchedules) (*Schedules, error)
	GetById(context.Context, *SchedulesPrimaryKey) (*Schedules, error)
	GetList(context.Context, *GetListSchedulesRequest) (*GetListSchedulesResponse, error)
	Update(context.Context, *UpdateSchedules) (*Schedules, error)
	Delete(context.Context, *SchedulesPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedSchedulesServiceServer()
}

// UnimplementedSchedulesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulesServiceServer struct {
}

func (UnimplementedSchedulesServiceServer) Create(context.Context, *CreateSchedules) (*Schedules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSchedulesServiceServer) GetById(context.Context, *SchedulesPrimaryKey) (*Schedules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSchedulesServiceServer) GetList(context.Context, *GetListSchedulesRequest) (*GetListSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSchedulesServiceServer) Update(context.Context, *UpdateSchedules) (*Schedules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSchedulesServiceServer) Delete(context.Context, *SchedulesPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSchedulesServiceServer) mustEmbedUnimplementedSchedulesServiceServer() {}

// UnsafeSchedulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulesServiceServer will
// result in compilation errors.
type UnsafeSchedulesServiceServer interface {
	mustEmbedUnimplementedSchedulesServiceServer()
}

func RegisterSchedulesServiceServer(s grpc.ServiceRegistrar, srv SchedulesServiceServer) {
	s.RegisterService(&SchedulesService_ServiceDesc, srv)
}

func _SchedulesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServiceServer).Create(ctx, req.(*CreateSchedules))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulesService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulesService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServiceServer).GetById(ctx, req.(*SchedulesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulesService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulesService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServiceServer).GetList(ctx, req.(*GetListSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServiceServer).Update(ctx, req.(*UpdateSchedules))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServiceServer).Delete(ctx, req.(*SchedulesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulesService_ServiceDesc is the grpc.ServiceDesc for SchedulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.SchedulesService",
	HandlerType: (*SchedulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SchedulesService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SchedulesService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SchedulesService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SchedulesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SchedulesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedules_service.proto",
}
