// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: supper_admin.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SupperAdminService_Create_FullMethodName  = "/users_service.SupperAdminService/Create"
	SupperAdminService_GetById_FullMethodName = "/users_service.SupperAdminService/GetById"
	SupperAdminService_GetList_FullMethodName = "/users_service.SupperAdminService/GetList"
	SupperAdminService_Update_FullMethodName  = "/users_service.SupperAdminService/Update"
	SupperAdminService_Delete_FullMethodName  = "/users_service.SupperAdminService/Delete"
)

// SupperAdminServiceClient is the client API for SupperAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupperAdminServiceClient interface {
	Create(ctx context.Context, in *CreateSupperAdmin, opts ...grpc.CallOption) (*SupperAdmin, error)
	GetById(ctx context.Context, in *SupperAdminPrimaryKey, opts ...grpc.CallOption) (*SupperAdmin, error)
	GetList(ctx context.Context, in *GetListSupperAdminRequest, opts ...grpc.CallOption) (*GetListSupperAdminResponse, error)
	Update(ctx context.Context, in *UpdateSupperAdmin, opts ...grpc.CallOption) (*SupperAdmin, error)
	Delete(ctx context.Context, in *SupperAdminPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type supperAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupperAdminServiceClient(cc grpc.ClientConnInterface) SupperAdminServiceClient {
	return &supperAdminServiceClient{cc}
}

func (c *supperAdminServiceClient) Create(ctx context.Context, in *CreateSupperAdmin, opts ...grpc.CallOption) (*SupperAdmin, error) {
	out := new(SupperAdmin)
	err := c.cc.Invoke(ctx, SupperAdminService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supperAdminServiceClient) GetById(ctx context.Context, in *SupperAdminPrimaryKey, opts ...grpc.CallOption) (*SupperAdmin, error) {
	out := new(SupperAdmin)
	err := c.cc.Invoke(ctx, SupperAdminService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supperAdminServiceClient) GetList(ctx context.Context, in *GetListSupperAdminRequest, opts ...grpc.CallOption) (*GetListSupperAdminResponse, error) {
	out := new(GetListSupperAdminResponse)
	err := c.cc.Invoke(ctx, SupperAdminService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supperAdminServiceClient) Update(ctx context.Context, in *UpdateSupperAdmin, opts ...grpc.CallOption) (*SupperAdmin, error) {
	out := new(SupperAdmin)
	err := c.cc.Invoke(ctx, SupperAdminService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supperAdminServiceClient) Delete(ctx context.Context, in *SupperAdminPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SupperAdminService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupperAdminServiceServer is the server API for SupperAdminService service.
// All implementations must embed UnimplementedSupperAdminServiceServer
// for forward compatibility
type SupperAdminServiceServer interface {
	Create(context.Context, *CreateSupperAdmin) (*SupperAdmin, error)
	GetById(context.Context, *SupperAdminPrimaryKey) (*SupperAdmin, error)
	GetList(context.Context, *GetListSupperAdminRequest) (*GetListSupperAdminResponse, error)
	Update(context.Context, *UpdateSupperAdmin) (*SupperAdmin, error)
	Delete(context.Context, *SupperAdminPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedSupperAdminServiceServer()
}

// UnimplementedSupperAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupperAdminServiceServer struct {
}

func (UnimplementedSupperAdminServiceServer) Create(context.Context, *CreateSupperAdmin) (*SupperAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSupperAdminServiceServer) GetById(context.Context, *SupperAdminPrimaryKey) (*SupperAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSupperAdminServiceServer) GetList(context.Context, *GetListSupperAdminRequest) (*GetListSupperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSupperAdminServiceServer) Update(context.Context, *UpdateSupperAdmin) (*SupperAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSupperAdminServiceServer) Delete(context.Context, *SupperAdminPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSupperAdminServiceServer) mustEmbedUnimplementedSupperAdminServiceServer() {}

// UnsafeSupperAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupperAdminServiceServer will
// result in compilation errors.
type UnsafeSupperAdminServiceServer interface {
	mustEmbedUnimplementedSupperAdminServiceServer()
}

func RegisterSupperAdminServiceServer(s grpc.ServiceRegistrar, srv SupperAdminServiceServer) {
	s.RegisterService(&SupperAdminService_ServiceDesc, srv)
}

func _SupperAdminService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupperAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupperAdminServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupperAdminService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupperAdminServiceServer).Create(ctx, req.(*CreateSupperAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupperAdminService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupperAdminPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupperAdminServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupperAdminService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupperAdminServiceServer).GetById(ctx, req.(*SupperAdminPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupperAdminService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSupperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupperAdminServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupperAdminService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupperAdminServiceServer).GetList(ctx, req.(*GetListSupperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupperAdminService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupperAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupperAdminServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupperAdminService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupperAdminServiceServer).Update(ctx, req.(*UpdateSupperAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupperAdminService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupperAdminPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupperAdminServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupperAdminService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupperAdminServiceServer).Delete(ctx, req.(*SupperAdminPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SupperAdminService_ServiceDesc is the grpc.ServiceDesc for SupperAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupperAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.SupperAdminService",
	HandlerType: (*SupperAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SupperAdminService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SupperAdminService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SupperAdminService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SupperAdminService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SupperAdminService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supper_admin.proto",
}
